import traceback
import time
import ccxt
import configparser
import pandas as pd
import numpy as np

# Load API keys from a config file
config = configparser.ConfigParser()
config.read('config.ini')

api_key = config.get('BINANCE', 'API_KEY', fallback=None)
api_secret = config.get('BINANCE', 'API_SECRET', fallback=None)

if not api_key or not api_secret:
    raise ValueError("API Key and Secret must be set in the config.ini file under the [BINANCE] section.")

# Initialize the Binance API with auto time synchronization
binance_futures = ccxt.binanceusdm({
    'apiKey': api_key,
    'secret': api_secret,
    'enableRateLimit': True,
    'options': {
        'adjustForTimeDifference': True  # Automatically sync time difference
    }
})

def place_orders(long_pair, short_pair, long_amount, short_amount):
    """
    Place a long and short order on the futures market.
    """
    try:
        print("\n--- Fetching Balances ---")
        futures_balance_info = binance_futures.fetch_balance(params={'type': 'future'})
        futures_free_margin = float(futures_balance_info['free']['USDT'])  # Fetch free margin directly
        print(f"Futures Free Margin: {futures_free_margin:.2f} USDT")

        # Validate sufficient balance
        total_required = long_amount + short_amount
        if total_required > futures_free_margin:
            raise ValueError(f"Insufficient futures free margin. Available: {futures_free_margin:.2f}, Required: {total_required:.2f}")

        # Fetch the current prices for long and short pairs
        print("\n--- Fetching Current Prices ---")
        long_ticker = binance_futures.fetch_ticker(long_pair)
        short_ticker = binance_futures.fetch_ticker(short_pair)
        long_price = long_ticker['last']
        short_price = short_ticker['last']
        print(f"Long Pair ({long_pair}) Price: {long_price:.4f} USDT")
        print(f"Short Pair ({short_pair}) Price: {short_price:.4f} USDT")

        # Calculate quantities to trade
        long_quantity = long_amount / long_price
        short_quantity = short_amount / short_price
        print(f"Placing Orders: Long {long_pair} ({long_quantity:.4f}) and Short {short_pair} ({short_quantity:.4f})")

        # Place long order on the futures market
        print("\n--- Placing Long Order ---")
        long_order = binance_futures.create_order(
            symbol=long_pair,
            type='market',
            side='buy',
            amount=long_quantity
        )
        print(f"Long Order Placed: {long_order['id']} | Status: {long_order['status']} | Filled: {long_order['filled']}")

        # Place short order on the futures market
        print("\n--- Placing Short Order ---")
        short_order = binance_futures.create_order(
            symbol=short_pair,
            type='market',
            side='sell',
            amount=short_quantity
        )
        print(f"Short Order Placed: {short_order['id']} | Status: {short_order['status']} | Filled: {short_order['filled']}")

        return [long_order, short_order]

    except ccxt.InsufficientFunds as e:
        print(f"\nError: Insufficient funds - {e}")
        print("Tip: Check your futures free margin or reduce the trade amount.")
    except Exception as e:
        print(f"\nError: {e}")
        traceback.print_exc()
        return []

def main():
    print("Welcome to the Crypto Arbitrage Program!")

    # Prompt the user for inputs
    long_pair = input("Enter the crypto pair to Long (e.g., BTC/USDT): ")
    short_pair = input("Enter the crypto pair to Short (e.g., ETH/USDT): ")
    long_amount = float(input("Enter the dollar amount for the Long position (e.g., 100): "))
    short_amount = float(input("Enter the dollar amount for the Short position (e.g., 90): "))
    half_life = float(input("Enter the half-life in hours to automatically close orders (e.g., 2): "))

    print("\nSummary of your input:")
    print(f"Long Pair: {long_pair}")
    print(f"Short Pair: {short_pair}")
    print(f"Long Amount: {long_amount:.2f} USDT")
    print(f"Short Amount: {short_amount:.2f} USDT")
    print(f"Half-Life: {half_life} hours\n")

    confirm = input("Do you want to proceed with these values? (yes/no): ").strip().lower()

    if confirm == "yes":
        print("Executing trades...")
        placed_orders = place_orders(long_pair, short_pair, long_amount, short_amount)

        # Schedule auto-close
        if placed_orders:
            print(f"Waiting {half_life} hours to automatically close orders...")
            time.sleep(half_life * 3600)
            print("Closing orders...")
            close_orders(placed_orders)
    else:
        print("Trade execution cancelled.")

if __name__ == "__main__":
    main()
